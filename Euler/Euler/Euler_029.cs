using Euler.Euler;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Euler
{
    public class Euler_029 : IEulerProblem
    {
        private string _description = "Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:" +
            "\n\n2^2=4, 2^3=8, 2^4=16, 2^5=32" +
            "\n3^2=9, 3^3=27, 3^4=81, 3^5=243" +
            "\n4^2=16, 4^3=64, 4^4=256, 4^5=1024" +
            "\n5^2=25, 5^3=125, 5^4=625, 5^5=3125" + 
            "\nIf they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:" +
            "\n\n4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125" +
            "\n\nHow many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?";

        public string Run()
        {
            return Main();
        }

        public int Number
        {
            get { return 29; }
        }

        public string Description
        {
            get { return _description; }
        }

        private string Main()
        {
            HashSet<BigInteger> bigDigits = new HashSet<BigInteger>();
            for (int i = 2; i <= 100; i++)
            {
                for (int k = 2; k <= 100; k++)
                {
                    bigDigits.Add(BigInteger.Pow(i, k));
                }
            }
            return bigDigits.Count.ToString();
        }        
    }
}
