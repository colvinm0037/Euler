using Euler.Euler;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler
{
    public class Euler_012 : IEulerProblem
    {
        private string _description = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:" +
                                        "\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ..." + 
                                        "\n\nLet us list the factors of the first seven triangle numbers:" + 
                                        "\n1: 1" + 
                                        "\n3: 1,3" + 
                                        "\n6: 1,2,3,6" + 
                                        "\n10: 1,2,5,10" + 
                                        "\n15: 1,3,5,15" + 
                                        "\n21: 1,3,7,21" + 
                                        "\n28: 1,2,4,7,14,28" + 
                                        "\nWe can see that 28 is the first triangle number to have over five divisors." + 
                                        "\n\nWhat is the value of the first triangle number to have over five hundred divisors?";

        public string Run()
        {
            return Main();
        }

        public int Number
        {
            get { return 12; }
        }

        public string Description
        {
            get { return _description; }
        }

        private string Main()
        {
            // What is the value of the first triangle number to have over five hundred divisors?
            
            for (int i = 1; i < 500000; i++)
            {
                long triangle = i * (i + 1) / 2;
                int factors = FindFactors(triangle);
                if (factors > 500)
                {
                    return triangle.ToString();
                }
            }
            return "";
        }

        private static int FindFactors(long triangle)
        {
            int factors = 0;
            for (int i = 1; i <= Math.Sqrt(triangle); i++)
            {
                if (triangle % i == 0)
                    factors += 2;
            }
            return factors;
        }        
    }
}
